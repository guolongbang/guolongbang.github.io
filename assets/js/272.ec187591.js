(window.webpackJsonp=window.webpackJsonp||[]).push([[272],{599:function(t,s,a){"use strict";a.r(s);var e=a(7),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"渲染命令-完成第一个案例的渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染命令-完成第一个案例的渲染"}},[t._v("#")]),t._v(" 渲染命令(完成第一个案例的渲染)")]),t._v(" "),s("p",[t._v("在前面几节课基础上，本节课通过设置一些渲染命令，最终完成第一个WebGPU小案例。本案例虽然非常简单，但是麻雀虽小，五脏俱全，后面的课程都可以在本节课的基础上给大家讲解。")]),t._v(" "),s("p",[t._v("你可以把本节课的小案例，当做一个学习模板，再次基础上增删代码，学习体验WebGPU的各种知识点。")]),t._v(" "),s("h3",{attrs:{id:"创建命令编码器和渲染通道"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建命令编码器和渲染通道"}},[t._v("#")]),t._v(" 创建命令编码器和渲染通道")]),t._v(" "),s("p",[t._v("首先通过GPU设备对象的方法"),s("code",[t._v(".createCommandEncoder()")]),t._v("创建一个命令编码器对象。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建GPU命令编码器对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" commandEncoder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" device"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCommandEncoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("通过命令对象的方法"),s("code",[t._v(".beginRenderPass()")]),t._v("可以创建一个渲染通道对象"),s("code",[t._v("renderPass")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" renderPass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commandEncoder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginRenderPass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要配置一些参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("通过GPU命令编码器对象"),s("code",[t._v("commandEncoder")]),t._v("可以控制渲染管线"),s("code",[t._v("pipeline")]),t._v("渲染输出像素数据。")]),t._v(" "),s("p",[t._v("前面讲过的一些控制webgpu API，默认不会直接执行，如果想在GPU上执行，还需要配置GPU命令编码器对象"),s("code",[t._v("commandEncoder")]),t._v("实现。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgwegpu/%E5%9B%BE%E5%85%83%E8%A3%85%E9%85%8D%E5%85%89%E6%A0%85%E5%8C%96.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"颜色缓冲区的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#颜色缓冲区的概念"}},[t._v("#")]),t._v(" 颜色缓冲区的概念")]),t._v(" "),s("p",[t._v("通过WebGPU渲染管线各个功能处理后，会得到图形的片元数据，或者说像素数据，这些像素数据，会存储到显卡内存颜色缓冲区中。")]),t._v(" "),s("p",[t._v("你可以类比顶点缓冲区和理解颜色缓冲区，顶点缓冲区的功能是存储顶点数据，颜色缓冲区的功能是存储渲染管线输出的像素数据。")]),t._v(" "),s("p",[t._v("颜色缓冲区和顶点缓冲区类似，可以创建，不过有一个比较特殊，就是canvas画布对应一个默认的颜色缓冲区，可以直接使用。")]),t._v(" "),s("p",[t._v("如果你希望webgpu绘制的图形，呈现在canvas画布上，就要把绘制的结果输出到canvas画布对应的颜色缓冲区中。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgwegpu/%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E6%A1%88.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"beginrenderpass的参数对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beginrenderpass的参数对象"}},[t._v("#")]),t._v(" "),s("code",[t._v(".beginRenderPass")]),t._v("的参数对象")]),t._v(" "),s("p",[s("code",[t._v(".beginRenderPass")]),t._v("的参数对象具有多个属性，比如常用的"),s("code",[t._v("colorAttachments(颜色附件)")]),t._v("、"),s("code",[t._v("depthStencilAttachment(深度/模板附件)")]),t._v("...本节课先给大家介绍其中一个颜色附近属性"),s("code",[t._v("colorAttachments")]),t._v("。")]),t._v(" "),s("p",[t._v("首先大家要知道渲染通道"),s("code",[t._v("renderPass")]),t._v("可以控制渲染管线"),s("code",[t._v("pipeline")]),t._v("渲染输出像素数据，输出的像素数据会存储到GPU设备的颜色缓冲区中。")]),t._v(" "),s("p",[s("code",[t._v("colorAttachments")]),t._v("属性就和颜色缓冲区有关，"),s("code",[t._v("colorAttachments")]),t._v("属性的值是数组，数组里面的元素是对象,可以包含多个对象，每个对象的都和一个颜色缓冲区相关，每个对象具有"),s("code",[t._v("view")]),t._v("、"),s("code",[t._v("loadOp")]),t._v("、"),s("code",[t._v("storeOp")]),t._v("、"),s("code",[t._v("clearValue")]),t._v("等属性。")]),t._v(" "),s("p",[t._v("当我们需要把渲染管线的像素数据存储到多个颜色缓冲区时，"),s("code",[t._v("colorAttachments")]),t._v("的属性值才需要设置多个元素对象，一般情况下，"),s("code",[t._v("colorAttachments")]),t._v("的数组元素只需要设置一个即可，这样的话，渲染通道控制渲染管线输出的像素最终就会存储到该数组元素对应颜色缓冲区。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" renderPass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commandEncoder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginRenderPass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给渲染通道指定颜色缓冲区，配置指定的缓冲区")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("colorAttachments")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向用于Canvas画布的纹理视图对象(Canvas对应的颜色缓冲区)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该渲染通道renderPass输出的像素数据会存储到Canvas画布对应的颜色缓冲区(纹理视图对象)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("view")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurrentTexture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createView")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("storeOp")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'store'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//像素数据写入颜色缓冲区")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("loadOp")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'clear'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("clearValue")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("r")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//背景颜色")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"设置渲染通道的渲染管线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置渲染通道的渲染管线"}},[t._v("#")]),t._v(" 设置渲染通道的渲染管线")]),t._v(" "),s("p",[t._v("实际开发，可能有一个渲染管线，也可能有多个，你可以根据需要，通过渲染通道"),s("code",[t._v("renderPass")]),t._v("的方法"),s("code",[t._v(".setPipeline()")]),t._v("设置你要控制的渲染管线。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const pipeline = device.createRenderPipeline()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置该渲染通道控制渲染管线")]),t._v("\nrenderPass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPipeline")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pipeline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("通过GPU命令编码器对象"),s("code",[t._v("commandEncoder")]),t._v("可以根据需要创建多个渲染通道，每个通道都可以控制自己对应的的渲染管线输出图像。不过咱们入门部分案例，比较简单，只是创建一个渲染通道而已。")]),t._v(" "),s("h3",{attrs:{id:"关联顶点缓冲区数据和渲染管线shaderlocation-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关联顶点缓冲区数据和渲染管线shaderlocation-0"}},[t._v("#")]),t._v(" 关联顶点缓冲区数据和渲染管线"),s("code",[t._v("shaderLocation: 0")])]),t._v(" "),s("p",[t._v("顶点缓冲区数据和渲染管线shaderLocation: 0表示存储位置关联起来")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("renderPass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setVertexBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vertexBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"/imgwegpu/%E5%85%B3%E8%81%94%E9%A1%B6%E7%82%B9%E7%BC%93%E5%86%B2%E5%8C%BA%E5%92%8C%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E9%A1%B6%E7%82%B9%E7%BC%93%E5%86%B2%E5%8C%BA%E5%9C%B0%E5%9D%80.png",alt:""}})]),t._v(" "),s("p",[t._v("补充(后面会讲解)：实际开发，可以通过"),s("code",[t._v("device.createBuffer")]),t._v("创建多个顶点缓冲区，第一个案例，只有一个顶点缓冲区"),s("code",[t._v(".setVertexBuffer()")]),t._v("的参数1设置为0即可，如果有多个，可以设置为0、1、2、3等，后面遇到再具体讲解。")]),t._v(" "),s("h3",{attrs:{id:"绘制命令-draw"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绘制命令-draw"}},[t._v("#")]),t._v(" 绘制命令"),s("code",[t._v(".draw()")])]),t._v(" "),s("p",[t._v("渲染通道对象"),s("code",[t._v("renderPass")]),t._v("提供了一个方法"),s("code",[t._v(".draw()")]),t._v("，英文字面意思就是绘制，你也可以把绘制方法"),s("code",[t._v(".draw()")]),t._v("称为绘制命令。通过绘制命令"),s("code",[t._v(".draw()")]),t._v("，你可以命令渲染通道对应的WebGPU的渲染管线如何绘制你定义的顶点数据。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// renderPass.setPipeline(pipeline);")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绘制命令.draw()绘制顶点数据")]),t._v("\nrenderPass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("注意顺序：调用"),s("code",[t._v(".draw()")]),t._v("之前要设置渲染管线，否则报错。")]),t._v(" "),s("h3",{attrs:{id:"渲染通道结束命令-end"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染通道结束命令-end"}},[t._v("#")]),t._v(" 渲染通道结束命令"),s("code",[t._v(".end()")])]),t._v(" "),s("p",[t._v("渲染通道对象"),s("code",[t._v("renderPass")]),t._v("的"),s("code",[t._v(".end()")]),t._v("方法比较简单，就是字面意思结束，不用设置参数，一般你设置好绘制等命令后，需要设置"),s("code",[t._v("renderPass.end()")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 渲染通道结束命令.end()")]),t._v("\nrenderPass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("执行"),s("code",[t._v("renderPass.end()")]),t._v(",系统内部会标记前渲染通道"),s("code",[t._v("renderPass")]),t._v("已经结束。")]),t._v(" "),s("h3",{attrs:{id:"命令编码器方法-finish"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令编码器方法-finish"}},[t._v("#")]),t._v(" 命令编码器方法"),s("code",[t._v(".finish()")])]),t._v(" "),s("p",[t._v("在前面代码调用的WebGPU API或者说方法，大部分都是用来控制GPU如何运行的，比如"),s("code",[t._v("device.createRenderPipeline()")]),t._v("就是控制GPU创建一个渲染管线，比如"),s("code",[t._v(".draw")]),t._v("方法，控制GPU如何绘制顶点数据，不过这些WebGPU API或方法不能直接控制GPU的运行，需要转化(编码)为GPU指令(命令)，才能控制GPU运转。")]),t._v(" "),s("p",[t._v("命令编码器对象"),s("code",[t._v("commandEncoder")]),t._v("执行"),s("code",[t._v(".finish()")]),t._v("方法返回一个命令缓冲区对象，同时会把该编码器相关的WebGL API或方法，编码为GPU指令，存入到返回的命令缓冲区对象中。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const commandEncoder = device.createCommandEncoder();")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令编码器.finish()创建命令缓冲区(生成GPU指令存入缓冲区)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" commandBuffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commandEncoder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finish")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"/imgwegpu/GPU%E6%8C%87%E4%BB%A4%E5%AD%98%E5%85%A5%E5%91%BD%E4%BB%A4%E7%BC%93%E5%86%B2%E5%8C%BA.jpg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"gpu设备命令队列-queue属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gpu设备命令队列-queue属性"}},[t._v("#")]),t._v(" GPU设备命令队列"),s("code",[t._v(".queue")]),t._v("属性")]),t._v(" "),s("p",[t._v("GPU设备命令队列"),s("code",[t._v(".queue")]),t._v("的功能是用来存放控制GPU运转的指令(命令)，简单说就是你命令编码器和渲染通道定义的一系列控制GPU运行的命令方法。")]),t._v(" "),s("p",[s("code",[t._v(".submit()")]),t._v("是GPU设备对象"),s("code",[t._v("device")]),t._v("队列属性"),s("code",[t._v(".queue")]),t._v("的一个提交方法。")]),t._v(" "),s("p",[t._v("提交方法"),s("code",[t._v(".submit()")]),t._v("的参数是一个数组，数组的元素是命令编码器执行"),s("code",[t._v(".finish()")]),t._v("生成的GPU命令缓冲区对象"),s("code",[t._v("commandBuffer")]),t._v("，数组元素可以包含多个命令缓冲区对象，入门案例比较简单，只添加了一个。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const commandEncoder = device.createCommandEncoder();")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" commandBuffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commandEncoder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finish")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令编码器缓冲区中命令传入GPU设备对象的命令队列.queue")]),t._v("\ndevice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commandBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"/imgwegpu/%E5%91%BD%E4%BB%A4%E7%BC%96%E7%A0%81%E5%99%A8%E5%92%8C%E5%91%BD%E4%BB%A4%E9%98%9F%E5%88%97.jpg",alt:""}})]),t._v(" "),s("p",[t._v("在执行"),s("code",[t._v(".queue.submit([])")]),t._v("方法之前，WebGPU相关命令方法，还不会被GPU硬件执行。")])])}),[],!1,null,null,null);s.default=n.exports}}]);