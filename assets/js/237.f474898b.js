(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{563:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"顶点位置插值-实现渐变色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#顶点位置插值-实现渐变色"}},[t._v("#")]),t._v(" 顶点位置插值(实现渐变色)")]),t._v(" "),s("p",[t._v("这节课给大家讲解"),s("strong",[t._v("顶点位置插值")]),s("code",[t._v("position")]),t._v("，然后利用插值的顶点位置数据，逐片元操作，实现一个网格模型Mesh沿着y轴方向进行颜色渐变。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgthreejs/y%E6%96%B9%E5%90%91%E6%B8%90%E5%8F%98.jpg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"知识回顾-顶点颜色数据插值计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识回顾-顶点颜色数据插值计算"}},[t._v("#")]),t._v(" 知识回顾：顶点颜色数据插值计算")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgthreejs/%E5%9B%BE%E5%85%83%E8%A3%85%E9%85%8D%E5%85%89%E6%A0%85%E5%8C%96.png",alt:""}})]),t._v(" "),s("p",[t._v("上节课给大家讲解过，你通过着色器语言GLSL ES关键字varying声明一个变量vColor，然后main函数中执行"),s("code",[t._v("vColor = color;")]),t._v("，就可以对顶点颜色数据"),s("code",[t._v("color")]),t._v("进行插值计算，插值后"),s("code",[t._v("vColor")]),t._v("的颜色数据量与片元数量一致，也就是说每一个片元都能对应一个顶点颜色插值数据"),s("code",[t._v("vColor")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顶点着色器代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vertexShader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n// attribute vec3 color;//默认提供不用手写\nvarying vec3 vColor;// varying关键字声明一个变量表示顶点颜色插值后的结果\nvoid main(){\n  vColor = color;// 顶点颜色数据进行插值计算\n  // 投影矩阵 * 模型视图矩阵 * 模型顶点坐标\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 片元着色器代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fragmentShader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\nvarying vec3 vColor;// 顶点片元化后有多少个片元,顶点颜色插值后就有多少个颜色数据\nvoid main() {\n    // gl_FragColor = vec4(0.0,1.0,1.0,1.0);\n    gl_FragColor = vec4(vColor,1.0);\n}\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("h3",{attrs:{id:"顶点位置数据position插值计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#顶点位置数据position插值计算"}},[t._v("#")]),t._v(" 顶点位置数据"),s("code",[t._v("position")]),t._v("插值计算")]),t._v(" "),s("p",[t._v("不仅仅顶点颜色color数据可以通过顶点着色器插值计算，其实所有类型的顶点数据都可以，比如顶点位置数据"),s("code",[t._v("position")]),t._v("。")]),t._v(" "),s("p",[t._v("你只需要记住一个规律，任何类型的顶点数据，插值计算后，都会生成和所有片元一一对应的新数据。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgthreejs/%E5%9B%BE%E5%85%83%E8%A3%85%E9%85%8D%E5%85%89%E6%A0%85%E5%8C%96.png",alt:""}})]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顶点着色器代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vertexShader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\nvarying vec3 vPosition;//表示顶点插值后位置数据，与片元数量相同，一一对应\nvoid main(){\n  vPosition = position;// 顶点位置坐标插值计算\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("h3",{attrs:{id:"使用positon插值后数据vposition控制片元颜色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用positon插值后数据vposition控制片元颜色"}},[t._v("#")]),t._v(" 使用"),s("code",[t._v("positon")]),t._v("插值后数据"),s("code",[t._v("vPosition")]),t._v("控制片元颜色")]),t._v(" "),s("p",[t._v("根据几何体顶点坐标控制Mesh的颜色，y坐标小于0部分，红色，其他部分绿色。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgthreejs/%E5%87%A0%E4%BD%95%E4%BD%93%E6%8F%92%E5%80%BCy%E6%96%B9%E5%90%91%E6%B8%90%E5%8F%98.jpg",alt:""}})]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 片元着色器代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fragmentShader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\nvarying vec3 vPosition;//获取顶点着色器插值数据vPosition\nvoid main() {\n  // 根据vPosition位置控制片元颜色\n  if(vPosition.y < 0.0){\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\n  }else{\n    gl_FragColor = vec4(0.0,0.0,1.0,1.0);\n  }\n}\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("h3",{attrs:{id:"根据插值位置数据vposition设置渐变色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据插值位置数据vposition设置渐变色"}},[t._v("#")]),t._v(" 根据插值位置数据"),s("code",[t._v("vPosition")]),t._v("设置渐变色")]),t._v(" "),s("p",[t._v("控制Mesh沿着y方向，从底部到顶部进行颜色渐变,底部是绿色，顶部是红色。")]),t._v(" "),s("p",[t._v("下面以Mesh的几何体为准，几何体是一个矩形平面"),s("code",[t._v("PlaneGeometry")]),t._v("，底部顶点y坐标-25，顶部顶点y坐标25")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" geometry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PlaneGeometry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 片元着色器代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fragmentShader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\nvarying vec3 vPosition;\nvoid main() {\n    float per = (vPosition.y + 25.0)/50.0;\n    // 几何体顶点y坐标25，颜色值：1  0  0(红色)\n    // 几何体顶点y坐标-25，颜色值：0  1  0(绿色)\n    gl_FragColor = vec4(per,1.0-per,0.0,1.0);\n}\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("h3",{attrs:{id:"positon模型矩阵变换后插值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#positon模型矩阵变换后插值"}},[t._v("#")]),t._v(" "),s("code",[t._v("positon")]),t._v("模型矩阵变换后插值")]),t._v(" "),s("p",[t._v("刚才说话所有类型顶点数据都可以插值，你也可以测试，把顶点数据先用"),s("strong",[t._v("模型矩阵modelMatrix")]),t._v("进行变换，再插值计算。")]),t._v(" "),s("p",[t._v("这个时候"),s("code",[t._v("vPosition")]),t._v("反应就不仅仅是几何体geometry顶点的位置了，也包含mesh自身的旋转、缩放、平移。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顶点着色器代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vertexShader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\nvarying vec3 vPosition;\nvoid main(){\n  // vPosition = position;\n  // 考虑mesh及其父对象旋转、缩放、平移的影响\n  vPosition = vec3(modelMatrix * vec4( position, 1.0 ));\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("p",[t._v("你可以把mesh向上平移"),s("code",[t._v("mesh.position.y += 25;")]),t._v("。这时候你想想怎么写片元着色器代码，保证矩形平面底部绿色，顶部红色，然后进行渐变。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 片元着色器代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fragmentShader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\nvarying vec3 vPosition;\nvoid main() {\n    float per = vPosition.y /50.0;\n    // Mesh y坐标50，颜色值：1  0  0(红色)\n    // Mesh y坐标0，颜色值：0  1  0(绿色)\n    gl_FragColor = vec4(per,1.0-per,0.0,1.0);\n}\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"/imgthreejs/y%E6%96%B9%E5%90%91%E6%B8%90%E5%8F%98.jpg",alt:""}})])])}),[],!1,null,null,null);s.default=e.exports}}]);